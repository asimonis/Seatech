---
title: "Dolphin_Results"
format: pdf
editor: visual
---

## Goals of this study

Investigate patterns in the acoustic behavior of dolphins

## Data

Acoustic data was collected from drifting acoustic recorders during the 2018 California Current Ecosystem survey. See [Simonis et al 2020](https://repository.library.noaa.gov/view/noaa/27223) for more details. Data analyzed here includes CCES Drifts 10, 12, 13, 14, 16.

## Combine Logs

The presence of Dolphins and ships were logged by 1 Seatech analyst: Keisha Askoak.

```{r}
#| echo: false
#| message: false
#| warning: false

# # # if (!require("pacman")) install.packages("pacman")
if(!require('devtools')) install.packages('devtools')
# # install from GitHub
devtools::install_github('TaikiSan21/PAMmisc')
# devtools::install_github('ericpante/marmap')
suppressMessages(pacman::p_load(knitr,here,lubridate,dplyr,magrittr,xlsx,RSQLite,viridis,marmap,ggplot2,suncalc,ggnewscale,PAMmisc,stringr))

#Keisha's logs
LogKA<-list.files(here('data','2023','Keisha Askoak'), pattern='.xls',full.names = TRUE,recursive=TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments) %>%
  mutate(Analyst='KA')

#Save dolphin events and remove duplicates
Log <-LogKA %>%
  filter(Species.Code %in% c('UO','Gg')) %>%
  distinct() 

#Rename Drifts with word 'Drift'
Log$Input.file<-str_replace(Log$Input.file,'Drift-','CCES_')
Log$Input.file<-str_replace(Log$Input.file,'Drift_','CCES_')

#Define Drift Number based on input file
Ind<-str_locate(Log$Input.file,'CCES_')
Log$Drift<-substr(Log$Input.file,Ind+5,Ind+7)
Log$Drift<-as.numeric(gsub('\\\\','',Log$Drift))
#Create UTC variable for start time
Log$UTC<-with_tz(Log$Start.time,tz="GMT")
```

```{r}
#| echo: false
#| message: false
#| warning: false
## Remove times with known beaked whale encounters
#load existing beaked whale detections
load(here('data','2023','CCES2018_Drifts','Beaked whales','CCES2018_BW_and_PM_Detections.rda'))
EventInfo<-filter(EventInfo,species %in% c("ZC","?BW","BW","BW37V","BW43","BB","BWC","MS") )

for(e in 1:nrow(Log)){
  bwevents<-which(EventInfo$Deployment==Log$Drift[e] & EventInfo$StartTime>=Log$Start.time[e] & EventInfo$EndTime<=Log$End.time[e])
  if(length(bwevents)==0){next}
  Log<-Log[-bwevents,]
}
```

```{r}
#| echo: false
#| message: false
#| warning: false

drifts <- c(10,12,13,14,16)
#Create dataframe to save detections from all drifts
TimesAllUO<-data.frame()
TimesAllGg<-data.frame()
GPSAll<-data.frame()

#Use PG databases for duty cycle times
#load database
sqlite <- dbDriver("SQLite")
dbfiles<-list.files(here('data','2023','CCES2018_Drifts','Beaked whales'),full.names=TRUE)

#Use GPS csv files
GPSfiles<-list.files(here('data','2023','CCES2018_Drifts'),pattern='.csv')
Ind<-str_locate(GPSfiles,'CCES_')
GPSDrift<-substr(GPSfiles,Ind+5,Ind+7)
GPSDrift<-as.numeric(GPSDrift)

for(d in 1:length(drifts)){
  DriftID<-paste0('Drift-',drifts[d])
  conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,DriftID)))])
  DF <- dbReadTable(conn, "Sound_Acquisition")    
  dbDisconnect(conn)
  
  GPSInd<-which(GPSDrift == drifts[d])
  GPS<-read.csv(file=here('data','2023','CCES2018_Drifts',GPSfiles[GPSInd]))
  
  GPS<-GPS %>%
    select(UTC,Latitude,Longitude)%>%
    mutate(Drift=DriftID,UTC=as.POSIXct(GPS$UTC,'%Y-%m-%d %H:%M',tz='GMT'))
  
  GPSAll<-rbind(GPS,GPSAll)
  
  DF<-DF %>%
    mutate(Status=gsub(" ","",Status)) 
  
  StartUTC<-DF %>% 
    filter(Status=="Start") %>%
    mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Start) 
  
  StopUTC<-DF %>% 
    filter(Status=="Stop") %>%
    mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Stop)  
  
  TimesDF<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
    mutate(Drift = DriftID)
  
  #UO Events
  TimesDF$UO<-'Absent'
  
  #Loop through times to see if UO events span "recording on" periods
  LogUO<-filter(Log,Species.Code=="UO", Drift==drifts[d])
   for(m in 1:nrow(LogUO)){
    IndStart<-max(which(TimesDF$Start<=LogUO$Start.time[m]))
    IndStop<-min(which(TimesDF$Stop>=LogUO$End.time[m]))
    if(IndStart>0){
      if(is.na(IndStop) | is.infinite(IndStop)){IndStop=IndStart}
      if(is.na(IndStop) | IndStop==0){IndStop=IndStart}
      TimesDF$UO[IndStart:IndStop]<-'Present'
    }
   }
  
    TimesUO<-TimesDF %>% 
    filter(UO=="Present")%>%
    mutate(Species=as.factor('UO')) %>%
    select(Start,Drift,Species) %>%
    rename(UTC=Start)
  
  TimesAllUO<-rbind(TimesUO,TimesAllUO)
  
  #Gg Events
  TimesDF$Gg<-'Absent'
  #Loop through times to see if UO events span "recording on" periods
  LogGg<-filter(Log,Species.Code=="Gg", Drift==drifts[d])
   for(m in 1:nrow(LogGg)){
    IndStart<-max(which(TimesDF$Start<=LogGg$Start.time[m]))
    IndStop<-min(which(TimesDF$Stop>=LogGg$End.time[m]))
    if(IndStart>0){
      if(is.na(IndStop) | is.infinite(IndStop)){IndStop=IndStart}
      if(is.na(IndStop) | IndStop==0){IndStop=IndStart}
      TimesDF$Gg[IndStart:IndStop]<-'Present'
    }
   }   
  
  TimesGg<-TimesDF %>% 
    filter(Gg=="Present")%>%
    mutate(Species=as.factor('Gg')) %>%
    select(Start,Drift,Species) %>%
    rename(UTC=Start)
  
  TimesAllGg<-rbind(TimesGg,TimesAllGg)
}

```

## Remove times with missing data

MEHS did not have audio data for the entire length of all drifts. Only show drift tracks and events from times where data was available

```{r}
#| echo: false
#| message: false
#| warning: false

#End dates identified by MEHS analysts
EndDates<-as.POSIXct(c('2018-09-05 23:59','2018-09-13 23:59','2018-09-26 23:59','2018-10-12 23:59','2018-11-15 23:59'),tz='GMT')

#Confirm end dates match number of drifts
if(length(EndDates)==length(drifts)){
  DataStop<-data.frame(EndDates,drifts=paste0('Drift-',drifts))
  
  for(d in 1:nrow(DataStop)){
    #remove events 
    removeEventInd<-which(TimesAllUO$Drift==DataStop$drifts[d] & TimesAllUO$UTC>DataStop$EndDates[d])
    if(length(removeEventInd)>0){TimesAllUO<-TimesAllUO[-removeEventInd,]}
    remove(removeEventInd)
    
    #remove GPS data
    removeGPSInd<-which(GPSAll$Drift==DataStop$drifts[d] & GPSAll$UTC>DataStop$EndDates[d])
    if(length(removeGPSInd)>0){GPSAll<-GPSAll[-removeGPSInd,]}
    remove(removeGPSInd)
  }  
}
```

## Plots

### Diel Plot

```{r}
#Define Figure Options

figtitle<-c('Drift-10','Drift-12','Drift-13','Drift-14','Drift-16')

UOColor = 'deeppink1'
GgColor = 'darkgoldenrod1'
```

#### UO

```{r}
#| echo: false
#| message: false
#| warning: false


PlotPresDrifts<-function(figtitle){
  UODF<-(TimesAllUO) %>%
  filter(Drift==figtitle) #%>%
    #select(UTC,Drift,Species)
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)

  
  plotPresGrid(UODF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),type="presence",bin="minute",gps=GPSDF,title=paste0(figtitle,': Unidentified Dolphins'),fill=UOColor,plotTz='America/Los_Angeles')
  
}

lapply(figtitle,PlotPresDrifts)

```

#### Risso's

```{r}
#| echo: false
#| message: false
#| warning: false

PlotPresDrifts<-function(figtitle){
  
  GgDF<-(TimesAllGg) %>%
  filter(Drift==figtitle)
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)
  
   plotPresGrid(GgDF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),type="presence",bin="minute",gps=GPSDF,title=paste0(figtitle,': Risso\'s Dolphins'),fill=GgColor,plotTz='America/Los_Angeles')
  
  
}

lapply(figtitle,PlotPresDrifts)
```

### **Daily Plot (# of hours with detections each day)**

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 8

SpDFSum<-TimesAllUO %>%
    mutate(Hour=hour(UTC),Date=as.Date(UTC)) %>%
    group_by(Drift,Species,Date) %>%
    summarize(HourCount = length(unique(Hour))) %>%
    mutate(Day = as.POSIXct(Date))
   
   
ggplot(SpDFSum,aes(Day,HourCount,fill=Species))+
   geom_bar(stat="identity",position=position_dodge2(width=.8,preserve='single'))+
   ggtitle('Unidentified Dolphins')+
   scale_fill_manual(values=c("UO"=UOColor))+
   scale_x_datetime(date_breaks = '2 weeks', date_labels="%b-%d")+
   ylab('Hours with detections')+
   facet_grid(Drift~.,scales = "free",space="free")+
   theme(panel.background = element_rect(fill = "midnightblue"),
          panel.grid.major = element_line(color = 'black', linetype = 'dotted'),panel.grid.minor = element_line(color = 'black',linetype = 'dotted', size = .5))

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 2

for(f in 1:length(figtitle)){
  DriftDF<-filter(SpDFSum,Drift==figtitle[f])

print(ggplot( DriftDF,aes(Day,HourCount,fill=Species))+
   geom_bar(stat="identity",position=position_dodge2(width=.8,preserve='single'))+
   ggtitle(paste(figtitle[f],': Unidentified Dolphins'))+
   scale_fill_manual(values=c("UO"=UOColor))+
   scale_x_datetime(date_breaks = '2 weeks', date_labels="%b-%d")+
   ylab('Hours with detections')+
   theme(panel.background = element_rect(fill = "midnightblue"),
          panel.grid.major = element_line(color = 'black', linetype = 'dotted'),panel.grid.minor = element_line(color = 'black',linetype = 'dotted', size = .5)))
  }
```

### Map

### Unidentified Dolphin Map

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4 
#| fig-height: 4 

#Function PlotPresMaps will map events on each drift 
for(f in 1:length(figtitle)){
  UODF<-(TimesAllUO) %>%
    filter(Drift==figtitle[f], Species=="UO")
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle[f])
  
  #Define position of each event
  for(c in 1:nrow(UODF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,UODF$UTC[c],units="mins"))))
    UODF$Longitude[c]<-GPSDF$Longitude[Ind]
    UODF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
    if(nrow(UODF)<1){next}
  
  #define boundaries of the map
  lon1<-min(GPSDF$Longitude)-2
  lon2<-max(GPSDF$Longitude)+2
  lat1<-max(GPSDF$Latitude)+2
  lat2<-min(GPSDF$Latitude)-2

  #Extract bathymetry data from NOAA (saves local file to speed future performance)
  bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

  #Whales
 print(autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
    coord_cartesian(expand = 0)+
    geom_contour(aes(z=z),breaks=c(-100,-500,-1000),color="gray24")+
    scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                         colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
    geom_point(data=GPSDF,aes(Longitude,Latitude),size=0.05,color='gray92')+
    new_scale_color()+
    geom_point(data=UODF,aes(x=Longitude,y=Latitude,color=Species),size=.5)+
scale_color_manual(values=c("UO"=UOColor),name="")+
    xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle[f]))
}

```

#### Risso's

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4 
#| fig-height: 4 

#Function PlotPresMaps will map events on each drift 
for(f in 1:length(figtitle)){
  GgDF<-(TimesAllGg) %>%
    filter(Drift==figtitle[f], Species=="Gg")
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle[f])
  
  #Define position of each event
  for(c in 1:nrow(GgDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,GgDF$UTC[c],units="mins"))))
    GgDF$Longitude[c]<-GPSDF$Longitude[Ind]
    GgDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
    if(nrow(GgDF)<1){next}
  
  #define boundaries of the map
  lon1<-min(GPSDF$Longitude)-2
  lon2<-max(GPSDF$Longitude)+2
  lat1<-max(GPSDF$Latitude)+2
  lat2<-min(GPSDF$Latitude)-2

  #Extract bathymetry data from NOAA (saves local file to speed future performance)
  bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

  #Whales
 print(autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
    coord_cartesian(expand = 0)+
    geom_contour(aes(z=z),breaks=c(-100,-500,-1000),color="gray24")+
    scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                         colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
    geom_point(data=GPSDF,aes(Longitude,Latitude),size=0.05,color='gray92')+
    new_scale_color()+
    geom_point(data=GgDF,aes(x=Longitude,y=Latitude,color=Species),size=.5)+
scale_color_manual(values=c("Gg"=GgColor),name="")+
    xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle[f]))
}

```

#### Map of all drifts

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 9 
#| fig-height: 8 

#Create dataframe with positions of all events
SpDF_gps<-data.frame()

for(d in 1:length(figtitle)){
    UODF<-(TimesAllUO) %>%
    filter(Drift==figtitle[d])
  
   GgDF<-(TimesAllGg) %>%
    filter(Drift==figtitle[d])
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle[d])

  #Define position of each event
  for(c in 1:nrow(UODF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,UODF$UTC[c],units="mins"))))
    UODF$Longitude[c]<-GPSDF$Longitude[Ind]
    UODF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
  
   for(c in 1:nrow(GgDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,GgDF$UTC[c],units="mins"))))
    GgDF$Longitude[c]<-GPSDF$Longitude[Ind]
    GgDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
  
  DF<-rbind(UODF,GgDF)
  
SpDF_gps<-rbind(DF,SpDF_gps)
DF<-data.frame()
UODF<-data.frame()
GgDF<-data.frame()
}

#define boundaries of the map
lon1=-126;lon2=-114;lat1=27;lat2=40

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Map with only drift tracks 
autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPSAll,aes(Longitude,Latitude),size=0.05,color='gray92')+
  xlab('Longitude')+ylab('Latitude')+
  ggtitle('All Drifts')


autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPSAll,aes(Longitude,Latitude),size=0.01,color='gray92')+
  new_scale_color()+
  geom_point(data=SpDF_gps,aes(x=Longitude,y=Latitude,color=Species,alpha=0.3),size=0.05,position="jitter")+
  scale_color_manual(values=c("UO"=UOColor,"Gg"=GgColor),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle('All Drifts: Unidentified Dolphins and Risso\'s Dolphins')

```

# All-drift Timeseries

```{r}
#| echo: false
#| message: false
#| warning: false
#| #| fig-width: 6  
#| fig-height: 8 
#create counts vectors to compare across time
# get counts by hour of day- drift 10 is earliest and drift20 is latest
daybins = seq(as.POSIXct(min(TimesAll$UTC)),as.POSIXct(max(TimesAll$UTC)),'days')

#need pracma for histc
if(!require('pracma')) install.packages('pracma')
library(pracma)
library(dplyr)

#run through for each drift and add on to dataframe
allcounts = data.frame(daybins)
tempUO = allcounts

for (iD in 1:length(figtitle)){

driftTimes = filter(TimesAllUO,Drift==figtitle[iD])
countdataUO = histc(as.numeric(driftTimes[driftTimes$Species=="UO",]$UTC),as.numeric(daybins))

countdfUO = data.frame(daybins)
if (iD > 1){
  #make separate df for whales, anthro and then add together
  countdfUO$counts = countdataUO$cnt
  countdfUO$drift = rep(figtitle[iD],length(daybins))
  countdfUO$id = rep("UO",length(daybins))

  allcounts = rbind(allcounts,countdfUO)
}else{
  tempUO$counts = countdataUO$cnt; tempUO$id = rep("UO",length(daybins))

  allcounts = tempUO
allcounts$drift = rep(figtitle[iD],length(daybins))
}
}

#change zeros to nans so they don't plot
allcounts$counts[allcounts$counts==0]=NA

#plotting
ggplot(data=allcounts,aes(x=daybins,y=counts,color=id))+ 
geom_point(size=.5)+
  scale_color_manual(values=c(UOColor,GgColor))+
facet_wrap(~drift,ncol=1)+
   theme(panel.background = element_rect(fill = "midnightblue"),
          panel.grid.major = element_line(color = 'black', linetype = 'dotted'),panel.grid.minor = element_line(color = 'black',linetype = 'dotted', size = .5))

```

# the end!
